1)
-Create an llvm plugin/module/pass? that will do two things.
        1) After code has been parsed, for all user-defined functions,
           a wrapper function will be made that takes in the same arguments
           as the original user-defined functions. This function will have
           some code that does the following:
                A) Fetches the address,len(in bytes), and key
                   of the original function.
                B) Runs through a function.
                   This function is taken from a .c file that is read in and used
                   as the main packer. This function is used to
                   to decrypt the address space of the original function.
                C) Uses original function's passed arguments
                   and jumps to original function's address
        2) During Code generation for whichever architecture, 
           a list of function addresses which have been marked "encrypt"?
           will be encrypted using its appropriate key and len of function.
           This lookup table should be the same as the one used by 1A.
            

-some ideas about taking in a user-defined packer function and make it a llvm
function. have some c code that packs the binary, compile with 

2)
-use llvm to insert a set of nop instructions or some other sort of 
random binary pattern before the code generated for an function as well
as markers describing the layout of the function in address order.
-use libbfd to find these pattern in the binary code to overwrite with the
decryption code, and then use the function markers written by the ealier step
to encrypt the function binary code, thus, an after-compile binary packer
but using help from a compiler plugin.

In the general sense, mprotect is the perferred choice (on POSIX conforming systems) under sys/mman.h (check http://linux.die.net/man/2/mprotect). Simply get the address and system page count of the executable section of your process and call mprotect to request permission permissions; write to it; then, call mprotect again to release write permission.

However, if this is meant to be on low-level routines where speed is of absolute importance (or mprotect is not available) then you'll want to compile the library with its .text section writable as calling mprotect most likely issues a Translation Lookaside Buffer (TLB) flush that (especially in a multi-processor environment) can and will cause a bottleneck. If the specific system is using hardware protection via paging (which nearly all are now) then the only way to change the protection is by doing a TLB flush which must be executed on every referenced page, referenced page table (group of pages), referenced page directory (group of page tables) and every processor. To top it off, this must be executed in ring 0 which requires a syscall which just puts the cherry on top for overhead.

In the latter case, the easiest solution would be to compile the library normally and then objcopy it with --writable-text (as mentioned by ggiroux).

Another solution would be to define the linker map file linker.ld yourself. Then you may specify permissions of any section explicitly. Its not too complicated; if system-dependent. Refer to documentation at http://www.math.utah.edu/docs/info/ld_3.html. You could also look at your system provided linker.ld file and modify it from there. Passing -Wl,--verbose to gcc will instruct the linker to spit out all relevant files (including its default linker.ld) in which you could then modify the permissions of the .text section and recompile the library (forevermore) using the new linker.ld file.

To summarize, my recommenda